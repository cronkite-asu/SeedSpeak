//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Data.Objects;
using System.Data.EntityClient;

namespace SeedSpeak.Model
{
    public partial class seedspeakdbEntities : ObjectContext
    {
        public const string ConnectionString = "name=seedspeakdbEntities";
        public const string ContainerName = "seedspeakdbEntities";
    
        #region Constructors
    
        public seedspeakdbEntities()
            : base(ConnectionString, ContainerName)
        {
            this.ContextOptions.LazyLoadingEnabled = true;
        }
    
        public seedspeakdbEntities(string connectionString)
            : base(connectionString, ContainerName)
        {
            this.ContextOptions.LazyLoadingEnabled = true;
        }
    
        public seedspeakdbEntities(EntityConnection connection)
            : base(connection, ContainerName)
        {
            this.ContextOptions.LazyLoadingEnabled = true;
        }
    
        #endregion
    
        #region ObjectSet Properties
    
        public ObjectSet<Bookmark> Bookmarks
        {
            get { return _bookmarks  ?? (_bookmarks = CreateObjectSet<Bookmark>("Bookmarks")); }
        }
        private ObjectSet<Bookmark> _bookmarks;
    
        public ObjectSet<Category> Categories
        {
            get { return _categories  ?? (_categories = CreateObjectSet<Category>("Categories")); }
        }
        private ObjectSet<Category> _categories;
    
        public ObjectSet<City> Cities
        {
            get { return _cities  ?? (_cities = CreateObjectSet<City>("Cities")); }
        }
        private ObjectSet<City> _cities;
    
        public ObjectSet<Comment> Comments
        {
            get { return _comments  ?? (_comments = CreateObjectSet<Comment>("Comments")); }
        }
        private ObjectSet<Comment> _comments;
    
        public ObjectSet<Commitment> Commitments
        {
            get { return _commitments  ?? (_commitments = CreateObjectSet<Commitment>("Commitments")); }
        }
        private ObjectSet<Commitment> _commitments;
    
        public ObjectSet<Config> Configs
        {
            get { return _configs  ?? (_configs = CreateObjectSet<Config>("Configs")); }
        }
        private ObjectSet<Config> _configs;
    
        public ObjectSet<Country> Countries
        {
            get { return _countries  ?? (_countries = CreateObjectSet<Country>("Countries")); }
        }
        private ObjectSet<Country> _countries;
    
        public ObjectSet<ExternalAccount> ExternalAccounts
        {
            get { return _externalAccounts  ?? (_externalAccounts = CreateObjectSet<ExternalAccount>("ExternalAccounts")); }
        }
        private ObjectSet<ExternalAccount> _externalAccounts;
    
        public ObjectSet<Flag> Flags
        {
            get { return _flags  ?? (_flags = CreateObjectSet<Flag>("Flags")); }
        }
        private ObjectSet<Flag> _flags;
    
        public ObjectSet<Location> Locations
        {
            get { return _locations  ?? (_locations = CreateObjectSet<Location>("Locations")); }
        }
        private ObjectSet<Location> _locations;
    
        public ObjectSet<Medium> Media
        {
            get { return _media  ?? (_media = CreateObjectSet<Medium>("Media")); }
        }
        private ObjectSet<Medium> _media;
    
        public ObjectSet<Member> Members
        {
            get { return _members  ?? (_members = CreateObjectSet<Member>("Members")); }
        }
        private ObjectSet<Member> _members;
    
        public ObjectSet<MemberProfile> MemberProfiles
        {
            get { return _memberProfiles  ?? (_memberProfiles = CreateObjectSet<MemberProfile>("MemberProfiles")); }
        }
        private ObjectSet<MemberProfile> _memberProfiles;
    
        public ObjectSet<Privacy> Privacies
        {
            get { return _privacies  ?? (_privacies = CreateObjectSet<Privacy>("Privacies")); }
        }
        private ObjectSet<Privacy> _privacies;
    
        public ObjectSet<Rating> Ratings
        {
            get { return _ratings  ?? (_ratings = CreateObjectSet<Rating>("Ratings")); }
        }
        private ObjectSet<Rating> _ratings;
    
        public ObjectSet<Region> Regions
        {
            get { return _regions  ?? (_regions = CreateObjectSet<Region>("Regions")); }
        }
        private ObjectSet<Region> _regions;
    
        public ObjectSet<Role> Roles
        {
            get { return _roles  ?? (_roles = CreateObjectSet<Role>("Roles")); }
        }
        private ObjectSet<Role> _roles;
    
        public ObjectSet<Seed> Seeds
        {
            get { return _seeds  ?? (_seeds = CreateObjectSet<Seed>("Seeds")); }
        }
        private ObjectSet<Seed> _seeds;
    
        public ObjectSet<SubCategory> SubCategories
        {
            get { return _subCategories  ?? (_subCategories = CreateObjectSet<SubCategory>("SubCategories")); }
        }
        private ObjectSet<SubCategory> _subCategories;
    
        public ObjectSet<Tag> Tags
        {
            get { return _tags  ?? (_tags = CreateObjectSet<Tag>("Tags")); }
        }
        private ObjectSet<Tag> _tags;
    
        public ObjectSet<Message> Messages
        {
            get { return _messages  ?? (_messages = CreateObjectSet<Message>("Messages")); }
        }
        private ObjectSet<Message> _messages;
    
        public ObjectSet<Content> Contents
        {
            get { return _contents  ?? (_contents = CreateObjectSet<Content>("Contents")); }
        }
        private ObjectSet<Content> _contents;
    
        public ObjectSet<MemberReplySeed> MemberReplySeeds
        {
            get { return _memberReplySeeds  ?? (_memberReplySeeds = CreateObjectSet<MemberReplySeed>("MemberReplySeeds")); }
        }
        private ObjectSet<MemberReplySeed> _memberReplySeeds;
    
        public ObjectSet<ssStream> ssStreams
        {
            get { return _ssStreams  ?? (_ssStreams = CreateObjectSet<ssStream>("ssStreams")); }
        }
        private ObjectSet<ssStream> _ssStreams;
    
        public ObjectSet<FollowPeople> FollowPeoples
        {
            get { return _followPeoples  ?? (_followPeoples = CreateObjectSet<FollowPeople>("FollowPeoples")); }
        }
        private ObjectSet<FollowPeople> _followPeoples;
    
        public ObjectSet<MutePeople> MutePeoples
        {
            get { return _mutePeoples  ?? (_mutePeoples = CreateObjectSet<MutePeople>("MutePeoples")); }
        }
        private ObjectSet<MutePeople> _mutePeoples;
    
        public ObjectSet<HideUnhide> HideUnhides
        {
            get { return _hideUnhides  ?? (_hideUnhides = CreateObjectSet<HideUnhide>("HideUnhides")); }
        }
        private ObjectSet<HideUnhide> _hideUnhides;

        #endregion
        #region Function Imports
        public ObjectResult<Seed> usp_UserGrowingSeed()
        {
            return base.ExecuteFunction<Seed>("usp_UserGrowingSeed");
        }
        public ObjectResult<MemberRole> usp_Member()
        {
            return base.ExecuteFunction<MemberRole>("usp_Member");
        }
        public ObjectResult<TopSeedPlanter> Usp_GetTopSeedPlanter()
        {
            return base.ExecuteFunction<TopSeedPlanter>("Usp_GetTopSeedPlanter");
        }
        public ObjectResult<TopGrowingSeed> usp_TopGrowingSeed()
        {
            return base.ExecuteFunction<TopGrowingSeed>("usp_TopGrowingSeed");
        }
        public ObjectResult<Usp_GetNotification_Result> Usp_GetNotification(Nullable<System.Guid> memberID)
        {
    
            ObjectParameter memberIDParameter;
    
            if (memberID.HasValue)
            {
                memberIDParameter = new ObjectParameter("MemberID", memberID);
            }
            else
            {
                memberIDParameter = new ObjectParameter("MemberID", typeof(System.Guid));
            }
            return base.ExecuteFunction<Usp_GetNotification_Result>("Usp_GetNotification", memberIDParameter);
        }
        public ObjectResult<usp_GetCommentNotification_Result> usp_GetCommentNotification(Nullable<System.Guid> memberID)
        {
    
            ObjectParameter memberIDParameter;
    
            if (memberID.HasValue)
            {
                memberIDParameter = new ObjectParameter("MemberID", memberID);
            }
            else
            {
                memberIDParameter = new ObjectParameter("MemberID", typeof(System.Guid));
            }
            return base.ExecuteFunction<usp_GetCommentNotification_Result>("usp_GetCommentNotification", memberIDParameter);
        }
        public ObjectResult<usp_GetCommitmentNotification_Result> usp_GetCommitmentNotification(Nullable<System.Guid> memberID)
        {
    
            ObjectParameter memberIDParameter;
    
            if (memberID.HasValue)
            {
                memberIDParameter = new ObjectParameter("MemberID", memberID);
            }
            else
            {
                memberIDParameter = new ObjectParameter("MemberID", typeof(System.Guid));
            }
            return base.ExecuteFunction<usp_GetCommitmentNotification_Result>("usp_GetCommitmentNotification", memberIDParameter);
        }
        public ObjectResult<usp_GetFlagNotification_Result> usp_GetFlagNotification(Nullable<System.Guid> memberID)
        {
    
            ObjectParameter memberIDParameter;
    
            if (memberID.HasValue)
            {
                memberIDParameter = new ObjectParameter("MemberID", memberID);
            }
            else
            {
                memberIDParameter = new ObjectParameter("MemberID", typeof(System.Guid));
            }
            return base.ExecuteFunction<usp_GetFlagNotification_Result>("usp_GetFlagNotification", memberIDParameter);
        }
        public ObjectResult<Seed> usp_SearchSeeds(string criteria)
        {
    
            ObjectParameter criteriaParameter;
    
            if (criteria != null)
            {
                criteriaParameter = new ObjectParameter("criteria", criteria);
            }
            else
            {
                criteriaParameter = new ObjectParameter("criteria", typeof(string));
            }
            return base.ExecuteFunction<Seed>("usp_SearchSeeds", criteriaParameter);
        }
        public ObjectResult<usp_GetLikeNotification_Result> usp_GetLikeNotification(Nullable<System.Guid> memberID)
        {
    
            ObjectParameter memberIDParameter;
    
            if (memberID.HasValue)
            {
                memberIDParameter = new ObjectParameter("MemberID", memberID);
            }
            else
            {
                memberIDParameter = new ObjectParameter("MemberID", typeof(System.Guid));
            }
            return base.ExecuteFunction<usp_GetLikeNotification_Result>("usp_GetLikeNotification", memberIDParameter);
        }

        #endregion
    }
}
