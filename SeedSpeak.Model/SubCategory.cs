//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace SeedSpeak.Model
{
    public partial class SubCategory
    {
        #region Primitive Properties
    
        public virtual System.Guid id
        {
            get;
            set;
        }
    
        public virtual Nullable<System.Guid> parentId
        {
            get { return _parentId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_parentId != value)
                    {
                        if (Category1 != null && Category1.id != value)
                        {
                            Category1 = null;
                        }
                        _parentId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<System.Guid> _parentId;
    
        public virtual Nullable<System.Guid> childId
        {
            get { return _childId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_childId != value)
                    {
                        if (Category != null && Category.id != value)
                        {
                            Category = null;
                        }
                        _childId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<System.Guid> _childId;

        #endregion
        #region Navigation Properties
    
        public virtual Category Category
        {
            get { return _category; }
            set
            {
                if (!ReferenceEquals(_category, value))
                {
                    var previousValue = _category;
                    _category = value;
                    FixupCategory(previousValue);
                }
            }
        }
        private Category _category;
    
        public virtual Category Category1
        {
            get { return _category1; }
            set
            {
                if (!ReferenceEquals(_category1, value))
                {
                    var previousValue = _category1;
                    _category1 = value;
                    FixupCategory1(previousValue);
                }
            }
        }
        private Category _category1;

        #endregion
        #region Association Fixup
    
        private bool _settingFK = false;
    
        private void FixupCategory(Category previousValue)
        {
            if (previousValue != null && previousValue.SubCategories.Contains(this))
            {
                previousValue.SubCategories.Remove(this);
            }
    
            if (Category != null)
            {
                if (!Category.SubCategories.Contains(this))
                {
                    Category.SubCategories.Add(this);
                }
                if (childId != Category.id)
                {
                    childId = Category.id;
                }
            }
            else if (!_settingFK)
            {
                childId = null;
            }
        }
    
        private void FixupCategory1(Category previousValue)
        {
            if (previousValue != null && previousValue.SubCategories1.Contains(this))
            {
                previousValue.SubCategories1.Remove(this);
            }
    
            if (Category1 != null)
            {
                if (!Category1.SubCategories1.Contains(this))
                {
                    Category1.SubCategories1.Add(this);
                }
                if (parentId != Category1.id)
                {
                    parentId = Category1.id;
                }
            }
            else if (!_settingFK)
            {
                parentId = null;
            }
        }

        #endregion
    }
}
