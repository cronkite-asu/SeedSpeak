//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace SeedSpeak.Model
{
    public partial class Category
    {
        #region Primitive Properties
    
        public virtual System.Guid id
        {
            get;
            set;
        }
    
        public virtual string name
        {
            get;
            set;
        }
    
        public virtual string status
        {
            get;
            set;
        }
    
        public virtual Nullable<System.Guid> requestedById
        {
            get { return _requestedById; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_requestedById != value)
                    {
                        if (Member != null && Member.id != value)
                        {
                            Member = null;
                        }
                        _requestedById = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<System.Guid> _requestedById;

        #endregion
        #region Navigation Properties
    
        public virtual Member Member
        {
            get { return _member; }
            set
            {
                if (!ReferenceEquals(_member, value))
                {
                    var previousValue = _member;
                    _member = value;
                    FixupMember(previousValue);
                }
            }
        }
        private Member _member;
    
        public virtual ICollection<SubCategory> SubCategories
        {
            get
            {
                if (_subCategories == null)
                {
                    var newCollection = new FixupCollection<SubCategory>();
                    newCollection.CollectionChanged += FixupSubCategories;
                    _subCategories = newCollection;
                }
                return _subCategories;
            }
            set
            {
                if (!ReferenceEquals(_subCategories, value))
                {
                    var previousValue = _subCategories as FixupCollection<SubCategory>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSubCategories;
                    }
                    _subCategories = value;
                    var newValue = value as FixupCollection<SubCategory>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSubCategories;
                    }
                }
            }
        }
        private ICollection<SubCategory> _subCategories;
    
        public virtual ICollection<SubCategory> SubCategories1
        {
            get
            {
                if (_subCategories1 == null)
                {
                    var newCollection = new FixupCollection<SubCategory>();
                    newCollection.CollectionChanged += FixupSubCategories1;
                    _subCategories1 = newCollection;
                }
                return _subCategories1;
            }
            set
            {
                if (!ReferenceEquals(_subCategories1, value))
                {
                    var previousValue = _subCategories1 as FixupCollection<SubCategory>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSubCategories1;
                    }
                    _subCategories1 = value;
                    var newValue = value as FixupCollection<SubCategory>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSubCategories1;
                    }
                }
            }
        }
        private ICollection<SubCategory> _subCategories1;
    
        public virtual ICollection<Seed> Seeds
        {
            get
            {
                if (_seeds == null)
                {
                    var newCollection = new FixupCollection<Seed>();
                    newCollection.CollectionChanged += FixupSeeds;
                    _seeds = newCollection;
                }
                return _seeds;
            }
            set
            {
                if (!ReferenceEquals(_seeds, value))
                {
                    var previousValue = _seeds as FixupCollection<Seed>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSeeds;
                    }
                    _seeds = value;
                    var newValue = value as FixupCollection<Seed>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSeeds;
                    }
                }
            }
        }
        private ICollection<Seed> _seeds;
    
        public virtual ICollection<ssStream> ssStreams
        {
            get
            {
                if (_ssStreams == null)
                {
                    var newCollection = new FixupCollection<ssStream>();
                    newCollection.CollectionChanged += FixupssStreams;
                    _ssStreams = newCollection;
                }
                return _ssStreams;
            }
            set
            {
                if (!ReferenceEquals(_ssStreams, value))
                {
                    var previousValue = _ssStreams as FixupCollection<ssStream>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupssStreams;
                    }
                    _ssStreams = value;
                    var newValue = value as FixupCollection<ssStream>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupssStreams;
                    }
                }
            }
        }
        private ICollection<ssStream> _ssStreams;

        #endregion
        #region Association Fixup
    
        private bool _settingFK = false;
    
        private void FixupMember(Member previousValue)
        {
            if (previousValue != null && previousValue.Categories.Contains(this))
            {
                previousValue.Categories.Remove(this);
            }
    
            if (Member != null)
            {
                if (!Member.Categories.Contains(this))
                {
                    Member.Categories.Add(this);
                }
                if (requestedById != Member.id)
                {
                    requestedById = Member.id;
                }
            }
            else if (!_settingFK)
            {
                requestedById = null;
            }
        }
    
        private void FixupSubCategories(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (SubCategory item in e.NewItems)
                {
                    item.Category = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SubCategory item in e.OldItems)
                {
                    if (ReferenceEquals(item.Category, this))
                    {
                        item.Category = null;
                    }
                }
            }
        }
    
        private void FixupSubCategories1(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (SubCategory item in e.NewItems)
                {
                    item.Category1 = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SubCategory item in e.OldItems)
                {
                    if (ReferenceEquals(item.Category1, this))
                    {
                        item.Category1 = null;
                    }
                }
            }
        }
    
        private void FixupSeeds(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Seed item in e.NewItems)
                {
                    if (!item.Categories.Contains(this))
                    {
                        item.Categories.Add(this);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Seed item in e.OldItems)
                {
                    if (item.Categories.Contains(this))
                    {
                        item.Categories.Remove(this);
                    }
                }
            }
        }
    
        private void FixupssStreams(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (ssStream item in e.NewItems)
                {
                    if (!item.Categories.Contains(this))
                    {
                        item.Categories.Add(this);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ssStream item in e.OldItems)
                {
                    if (item.Categories.Contains(this))
                    {
                        item.Categories.Remove(this);
                    }
                }
            }
        }

        #endregion
    }
}
