//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace SeedSpeak.Model
{
    public partial class Location
    {
        #region Primitive Properties
    
        public virtual System.Guid id
        {
            get;
            set;
        }
    
        public virtual Nullable<System.Guid> cityId
        {
            get { return _cityId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_cityId != value)
                    {
                        if (City != null && City.id != value)
                        {
                            City = null;
                        }
                        _cityId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<System.Guid> _cityId;
    
        public virtual string zipcode
        {
            get;
            set;
        }
    
        public virtual Nullable<double> localLat
        {
            get;
            set;
        }
    
        public virtual Nullable<double> localLong
        {
            get;
            set;
        }
    
        public virtual string crossStreet
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
    
        public virtual City City
        {
            get { return _city; }
            set
            {
                if (!ReferenceEquals(_city, value))
                {
                    var previousValue = _city;
                    _city = value;
                    FixupCity(previousValue);
                }
            }
        }
        private City _city;
    
        public virtual ICollection<MemberProfile> MemberProfiles
        {
            get
            {
                if (_memberProfiles == null)
                {
                    var newCollection = new FixupCollection<MemberProfile>();
                    newCollection.CollectionChanged += FixupMemberProfiles;
                    _memberProfiles = newCollection;
                }
                return _memberProfiles;
            }
            set
            {
                if (!ReferenceEquals(_memberProfiles, value))
                {
                    var previousValue = _memberProfiles as FixupCollection<MemberProfile>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupMemberProfiles;
                    }
                    _memberProfiles = value;
                    var newValue = value as FixupCollection<MemberProfile>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupMemberProfiles;
                    }
                }
            }
        }
        private ICollection<MemberProfile> _memberProfiles;
    
        public virtual ICollection<MemberProfile> MemberProfiles1
        {
            get
            {
                if (_memberProfiles1 == null)
                {
                    var newCollection = new FixupCollection<MemberProfile>();
                    newCollection.CollectionChanged += FixupMemberProfiles1;
                    _memberProfiles1 = newCollection;
                }
                return _memberProfiles1;
            }
            set
            {
                if (!ReferenceEquals(_memberProfiles1, value))
                {
                    var previousValue = _memberProfiles1 as FixupCollection<MemberProfile>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupMemberProfiles1;
                    }
                    _memberProfiles1 = value;
                    var newValue = value as FixupCollection<MemberProfile>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupMemberProfiles1;
                    }
                }
            }
        }
        private ICollection<MemberProfile> _memberProfiles1;
    
        public virtual ICollection<Seed> Seeds
        {
            get
            {
                if (_seeds == null)
                {
                    var newCollection = new FixupCollection<Seed>();
                    newCollection.CollectionChanged += FixupSeeds;
                    _seeds = newCollection;
                }
                return _seeds;
            }
            set
            {
                if (!ReferenceEquals(_seeds, value))
                {
                    var previousValue = _seeds as FixupCollection<Seed>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSeeds;
                    }
                    _seeds = value;
                    var newValue = value as FixupCollection<Seed>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSeeds;
                    }
                }
            }
        }
        private ICollection<Seed> _seeds;
    
        public virtual ICollection<ssStream> ssStreams
        {
            get
            {
                if (_ssStreams == null)
                {
                    var newCollection = new FixupCollection<ssStream>();
                    newCollection.CollectionChanged += FixupssStreams;
                    _ssStreams = newCollection;
                }
                return _ssStreams;
            }
            set
            {
                if (!ReferenceEquals(_ssStreams, value))
                {
                    var previousValue = _ssStreams as FixupCollection<ssStream>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupssStreams;
                    }
                    _ssStreams = value;
                    var newValue = value as FixupCollection<ssStream>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupssStreams;
                    }
                }
            }
        }
        private ICollection<ssStream> _ssStreams;

        #endregion
        #region Association Fixup
    
        private bool _settingFK = false;
    
        private void FixupCity(City previousValue)
        {
            if (previousValue != null && previousValue.Locations.Contains(this))
            {
                previousValue.Locations.Remove(this);
            }
    
            if (City != null)
            {
                if (!City.Locations.Contains(this))
                {
                    City.Locations.Add(this);
                }
                if (cityId != City.id)
                {
                    cityId = City.id;
                }
            }
            else if (!_settingFK)
            {
                cityId = null;
            }
        }
    
        private void FixupMemberProfiles(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (MemberProfile item in e.NewItems)
                {
                    item.Location = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (MemberProfile item in e.OldItems)
                {
                    if (ReferenceEquals(item.Location, this))
                    {
                        item.Location = null;
                    }
                }
            }
        }
    
        private void FixupMemberProfiles1(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (MemberProfile item in e.NewItems)
                {
                    item.Location1 = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (MemberProfile item in e.OldItems)
                {
                    if (ReferenceEquals(item.Location1, this))
                    {
                        item.Location1 = null;
                    }
                }
            }
        }
    
        private void FixupSeeds(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Seed item in e.NewItems)
                {
                    item.Location = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Seed item in e.OldItems)
                {
                    if (ReferenceEquals(item.Location, this))
                    {
                        item.Location = null;
                    }
                }
            }
        }
    
        private void FixupssStreams(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (ssStream item in e.NewItems)
                {
                    item.Location = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ssStream item in e.OldItems)
                {
                    if (ReferenceEquals(item.Location, this))
                    {
                        item.Location = null;
                    }
                }
            }
        }

        #endregion
    }
}
