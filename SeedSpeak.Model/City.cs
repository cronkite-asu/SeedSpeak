//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace SeedSpeak.Model
{
    public partial class City
    {
        #region Primitive Properties
    
        public virtual System.Guid id
        {
            get;
            set;
        }
    
        public virtual string code
        {
            get;
            set;
        }
    
        public virtual string name
        {
            get;
            set;
        }
    
        public virtual Nullable<double> latitude
        {
            get;
            set;
        }
    
        public virtual Nullable<double> longitude
        {
            get;
            set;
        }
    
        public virtual Nullable<System.Guid> regionId
        {
            get { return _regionId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_regionId != value)
                    {
                        if (Region != null && Region.id != value)
                        {
                            Region = null;
                        }
                        _regionId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<System.Guid> _regionId;

        #endregion
        #region Navigation Properties
    
        public virtual Region Region
        {
            get { return _region; }
            set
            {
                if (!ReferenceEquals(_region, value))
                {
                    var previousValue = _region;
                    _region = value;
                    FixupRegion(previousValue);
                }
            }
        }
        private Region _region;
    
        public virtual ICollection<Location> Locations
        {
            get
            {
                if (_locations == null)
                {
                    var newCollection = new FixupCollection<Location>();
                    newCollection.CollectionChanged += FixupLocations;
                    _locations = newCollection;
                }
                return _locations;
            }
            set
            {
                if (!ReferenceEquals(_locations, value))
                {
                    var previousValue = _locations as FixupCollection<Location>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupLocations;
                    }
                    _locations = value;
                    var newValue = value as FixupCollection<Location>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupLocations;
                    }
                }
            }
        }
        private ICollection<Location> _locations;

        #endregion
        #region Association Fixup
    
        private bool _settingFK = false;
    
        private void FixupRegion(Region previousValue)
        {
            if (previousValue != null && previousValue.Cities.Contains(this))
            {
                previousValue.Cities.Remove(this);
            }
    
            if (Region != null)
            {
                if (!Region.Cities.Contains(this))
                {
                    Region.Cities.Add(this);
                }
                if (regionId != Region.id)
                {
                    regionId = Region.id;
                }
            }
            else if (!_settingFK)
            {
                regionId = null;
            }
        }
    
        private void FixupLocations(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Location item in e.NewItems)
                {
                    item.City = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Location item in e.OldItems)
                {
                    if (ReferenceEquals(item.City, this))
                    {
                        item.City = null;
                    }
                }
            }
        }

        #endregion
    }
}
