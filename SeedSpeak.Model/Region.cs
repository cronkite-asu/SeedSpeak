//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace SeedSpeak.Model
{
    public partial class Region
    {
        #region Primitive Properties
    
        public virtual System.Guid id
        {
            get;
            set;
        }
    
        public virtual string code
        {
            get;
            set;
        }
    
        public virtual string name
        {
            get;
            set;
        }
    
        public virtual Nullable<System.Guid> countryId
        {
            get { return _countryId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_countryId != value)
                    {
                        if (Country != null && Country.id != value)
                        {
                            Country = null;
                        }
                        _countryId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<System.Guid> _countryId;

        #endregion
        #region Navigation Properties
    
        public virtual ICollection<City> Cities
        {
            get
            {
                if (_cities == null)
                {
                    var newCollection = new FixupCollection<City>();
                    newCollection.CollectionChanged += FixupCities;
                    _cities = newCollection;
                }
                return _cities;
            }
            set
            {
                if (!ReferenceEquals(_cities, value))
                {
                    var previousValue = _cities as FixupCollection<City>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupCities;
                    }
                    _cities = value;
                    var newValue = value as FixupCollection<City>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupCities;
                    }
                }
            }
        }
        private ICollection<City> _cities;
    
        public virtual Country Country
        {
            get { return _country; }
            set
            {
                if (!ReferenceEquals(_country, value))
                {
                    var previousValue = _country;
                    _country = value;
                    FixupCountry(previousValue);
                }
            }
        }
        private Country _country;

        #endregion
        #region Association Fixup
    
        private bool _settingFK = false;
    
        private void FixupCountry(Country previousValue)
        {
            if (previousValue != null && previousValue.Regions.Contains(this))
            {
                previousValue.Regions.Remove(this);
            }
    
            if (Country != null)
            {
                if (!Country.Regions.Contains(this))
                {
                    Country.Regions.Add(this);
                }
                if (countryId != Country.id)
                {
                    countryId = Country.id;
                }
            }
            else if (!_settingFK)
            {
                countryId = null;
            }
        }
    
        private void FixupCities(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (City item in e.NewItems)
                {
                    item.Region = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (City item in e.OldItems)
                {
                    if (ReferenceEquals(item.Region, this))
                    {
                        item.Region = null;
                    }
                }
            }
        }

        #endregion
    }
}
