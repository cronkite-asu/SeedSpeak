//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace SeedSpeak.Model
{
    public partial class Seed
    {
        #region Primitive Properties
    
        public virtual System.Guid id
        {
            get;
            set;
        }
    
        public virtual string title
        {
            get;
            set;
        }
    
        public virtual string description
        {
            get;
            set;
        }
    
        public virtual Nullable<System.Guid> locationId
        {
            get { return _locationId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_locationId != value)
                    {
                        if (Location != null && Location.id != value)
                        {
                            Location = null;
                        }
                        _locationId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<System.Guid> _locationId;
    
        public virtual Nullable<System.Guid> ownerId
        {
            get { return _ownerId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_ownerId != value)
                    {
                        if (Member != null && Member.id != value)
                        {
                            Member = null;
                        }
                        _ownerId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<System.Guid> _ownerId;
    
        public virtual Nullable<System.DateTime> createDate
        {
            get;
            set;
        }
    
        public virtual string status
        {
            get;
            set;
        }
    
        public virtual Nullable<System.Guid> parentSeedID
        {
            get { return _parentSeedID; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_parentSeedID != value)
                    {
                        if (Seed2 != null && Seed2.id != value)
                        {
                            Seed2 = null;
                        }
                        _parentSeedID = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<System.Guid> _parentSeedID;
    
        public virtual Nullable<System.Guid> rootSeedID
        {
            get;
            set;
        }
    
        public virtual Nullable<int> seedDistance
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
    
        public virtual ICollection<Bookmark> Bookmarks
        {
            get
            {
                if (_bookmarks == null)
                {
                    var newCollection = new FixupCollection<Bookmark>();
                    newCollection.CollectionChanged += FixupBookmarks;
                    _bookmarks = newCollection;
                }
                return _bookmarks;
            }
            set
            {
                if (!ReferenceEquals(_bookmarks, value))
                {
                    var previousValue = _bookmarks as FixupCollection<Bookmark>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupBookmarks;
                    }
                    _bookmarks = value;
                    var newValue = value as FixupCollection<Bookmark>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupBookmarks;
                    }
                }
            }
        }
        private ICollection<Bookmark> _bookmarks;
    
        public virtual ICollection<Comment> Comments
        {
            get
            {
                if (_comments == null)
                {
                    var newCollection = new FixupCollection<Comment>();
                    newCollection.CollectionChanged += FixupComments;
                    _comments = newCollection;
                }
                return _comments;
            }
            set
            {
                if (!ReferenceEquals(_comments, value))
                {
                    var previousValue = _comments as FixupCollection<Comment>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupComments;
                    }
                    _comments = value;
                    var newValue = value as FixupCollection<Comment>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupComments;
                    }
                }
            }
        }
        private ICollection<Comment> _comments;
    
        public virtual ICollection<Commitment> Commitments
        {
            get
            {
                if (_commitments == null)
                {
                    var newCollection = new FixupCollection<Commitment>();
                    newCollection.CollectionChanged += FixupCommitments;
                    _commitments = newCollection;
                }
                return _commitments;
            }
            set
            {
                if (!ReferenceEquals(_commitments, value))
                {
                    var previousValue = _commitments as FixupCollection<Commitment>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupCommitments;
                    }
                    _commitments = value;
                    var newValue = value as FixupCollection<Commitment>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupCommitments;
                    }
                }
            }
        }
        private ICollection<Commitment> _commitments;
    
        public virtual ICollection<Flag> Flags
        {
            get
            {
                if (_flags == null)
                {
                    var newCollection = new FixupCollection<Flag>();
                    newCollection.CollectionChanged += FixupFlags;
                    _flags = newCollection;
                }
                return _flags;
            }
            set
            {
                if (!ReferenceEquals(_flags, value))
                {
                    var previousValue = _flags as FixupCollection<Flag>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupFlags;
                    }
                    _flags = value;
                    var newValue = value as FixupCollection<Flag>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupFlags;
                    }
                }
            }
        }
        private ICollection<Flag> _flags;
    
        public virtual Location Location
        {
            get { return _location; }
            set
            {
                if (!ReferenceEquals(_location, value))
                {
                    var previousValue = _location;
                    _location = value;
                    FixupLocation(previousValue);
                }
            }
        }
        private Location _location;
    
        public virtual ICollection<Medium> Media
        {
            get
            {
                if (_media == null)
                {
                    var newCollection = new FixupCollection<Medium>();
                    newCollection.CollectionChanged += FixupMedia;
                    _media = newCollection;
                }
                return _media;
            }
            set
            {
                if (!ReferenceEquals(_media, value))
                {
                    var previousValue = _media as FixupCollection<Medium>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupMedia;
                    }
                    _media = value;
                    var newValue = value as FixupCollection<Medium>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupMedia;
                    }
                }
            }
        }
        private ICollection<Medium> _media;
    
        public virtual Member Member
        {
            get { return _member; }
            set
            {
                if (!ReferenceEquals(_member, value))
                {
                    var previousValue = _member;
                    _member = value;
                    FixupMember(previousValue);
                }
            }
        }
        private Member _member;
    
        public virtual ICollection<Rating> Ratings
        {
            get
            {
                if (_ratings == null)
                {
                    var newCollection = new FixupCollection<Rating>();
                    newCollection.CollectionChanged += FixupRatings;
                    _ratings = newCollection;
                }
                return _ratings;
            }
            set
            {
                if (!ReferenceEquals(_ratings, value))
                {
                    var previousValue = _ratings as FixupCollection<Rating>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupRatings;
                    }
                    _ratings = value;
                    var newValue = value as FixupCollection<Rating>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupRatings;
                    }
                }
            }
        }
        private ICollection<Rating> _ratings;
    
        public virtual ICollection<Tag> Tags
        {
            get
            {
                if (_tags == null)
                {
                    var newCollection = new FixupCollection<Tag>();
                    newCollection.CollectionChanged += FixupTags;
                    _tags = newCollection;
                }
                return _tags;
            }
            set
            {
                if (!ReferenceEquals(_tags, value))
                {
                    var previousValue = _tags as FixupCollection<Tag>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupTags;
                    }
                    _tags = value;
                    var newValue = value as FixupCollection<Tag>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupTags;
                    }
                }
            }
        }
        private ICollection<Tag> _tags;
    
        public virtual ICollection<Category> Categories
        {
            get
            {
                if (_categories == null)
                {
                    var newCollection = new FixupCollection<Category>();
                    newCollection.CollectionChanged += FixupCategories;
                    _categories = newCollection;
                }
                return _categories;
            }
            set
            {
                if (!ReferenceEquals(_categories, value))
                {
                    var previousValue = _categories as FixupCollection<Category>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupCategories;
                    }
                    _categories = value;
                    var newValue = value as FixupCollection<Category>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupCategories;
                    }
                }
            }
        }
        private ICollection<Category> _categories;
    
        public virtual ICollection<MemberReplySeed> MemberReplySeeds
        {
            get
            {
                if (_memberReplySeeds == null)
                {
                    var newCollection = new FixupCollection<MemberReplySeed>();
                    newCollection.CollectionChanged += FixupMemberReplySeeds;
                    _memberReplySeeds = newCollection;
                }
                return _memberReplySeeds;
            }
            set
            {
                if (!ReferenceEquals(_memberReplySeeds, value))
                {
                    var previousValue = _memberReplySeeds as FixupCollection<MemberReplySeed>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupMemberReplySeeds;
                    }
                    _memberReplySeeds = value;
                    var newValue = value as FixupCollection<MemberReplySeed>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupMemberReplySeeds;
                    }
                }
            }
        }
        private ICollection<MemberReplySeed> _memberReplySeeds;
    
        public virtual ICollection<ssStream> ssStreams
        {
            get
            {
                if (_ssStreams == null)
                {
                    var newCollection = new FixupCollection<ssStream>();
                    newCollection.CollectionChanged += FixupssStreams;
                    _ssStreams = newCollection;
                }
                return _ssStreams;
            }
            set
            {
                if (!ReferenceEquals(_ssStreams, value))
                {
                    var previousValue = _ssStreams as FixupCollection<ssStream>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupssStreams;
                    }
                    _ssStreams = value;
                    var newValue = value as FixupCollection<ssStream>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupssStreams;
                    }
                }
            }
        }
        private ICollection<ssStream> _ssStreams;
    
        public virtual ICollection<HideUnhide> HideUnhides
        {
            get
            {
                if (_hideUnhides == null)
                {
                    var newCollection = new FixupCollection<HideUnhide>();
                    newCollection.CollectionChanged += FixupHideUnhides;
                    _hideUnhides = newCollection;
                }
                return _hideUnhides;
            }
            set
            {
                if (!ReferenceEquals(_hideUnhides, value))
                {
                    var previousValue = _hideUnhides as FixupCollection<HideUnhide>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupHideUnhides;
                    }
                    _hideUnhides = value;
                    var newValue = value as FixupCollection<HideUnhide>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupHideUnhides;
                    }
                }
            }
        }
        private ICollection<HideUnhide> _hideUnhides;
    
        public virtual ICollection<Seed> Seed1
        {
            get
            {
                if (_seed1 == null)
                {
                    var newCollection = new FixupCollection<Seed>();
                    newCollection.CollectionChanged += FixupSeed1;
                    _seed1 = newCollection;
                }
                return _seed1;
            }
            set
            {
                if (!ReferenceEquals(_seed1, value))
                {
                    var previousValue = _seed1 as FixupCollection<Seed>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSeed1;
                    }
                    _seed1 = value;
                    var newValue = value as FixupCollection<Seed>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSeed1;
                    }
                }
            }
        }
        private ICollection<Seed> _seed1;
    
        public virtual Seed Seed2
        {
            get { return _seed2; }
            set
            {
                if (!ReferenceEquals(_seed2, value))
                {
                    var previousValue = _seed2;
                    _seed2 = value;
                    FixupSeed2(previousValue);
                }
            }
        }
        private Seed _seed2;

        #endregion
        #region Association Fixup
    
        private bool _settingFK = false;
    
        private void FixupLocation(Location previousValue)
        {
            if (previousValue != null && previousValue.Seeds.Contains(this))
            {
                previousValue.Seeds.Remove(this);
            }
    
            if (Location != null)
            {
                if (!Location.Seeds.Contains(this))
                {
                    Location.Seeds.Add(this);
                }
                if (locationId != Location.id)
                {
                    locationId = Location.id;
                }
            }
            else if (!_settingFK)
            {
                locationId = null;
            }
        }
    
        private void FixupMember(Member previousValue)
        {
            if (previousValue != null && previousValue.Seeds.Contains(this))
            {
                previousValue.Seeds.Remove(this);
            }
    
            if (Member != null)
            {
                if (!Member.Seeds.Contains(this))
                {
                    Member.Seeds.Add(this);
                }
                if (ownerId != Member.id)
                {
                    ownerId = Member.id;
                }
            }
            else if (!_settingFK)
            {
                ownerId = null;
            }
        }
    
        private void FixupSeed2(Seed previousValue)
        {
            if (previousValue != null && previousValue.Seed1.Contains(this))
            {
                previousValue.Seed1.Remove(this);
            }
    
            if (Seed2 != null)
            {
                if (!Seed2.Seed1.Contains(this))
                {
                    Seed2.Seed1.Add(this);
                }
                if (parentSeedID != Seed2.id)
                {
                    parentSeedID = Seed2.id;
                }
            }
            else if (!_settingFK)
            {
                parentSeedID = null;
            }
        }
    
        private void FixupBookmarks(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Bookmark item in e.NewItems)
                {
                    item.Seed = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Bookmark item in e.OldItems)
                {
                    if (ReferenceEquals(item.Seed, this))
                    {
                        item.Seed = null;
                    }
                }
            }
        }
    
        private void FixupComments(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Comment item in e.NewItems)
                {
                    item.Seed = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Comment item in e.OldItems)
                {
                    if (ReferenceEquals(item.Seed, this))
                    {
                        item.Seed = null;
                    }
                }
            }
        }
    
        private void FixupCommitments(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Commitment item in e.NewItems)
                {
                    item.Seed = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Commitment item in e.OldItems)
                {
                    if (ReferenceEquals(item.Seed, this))
                    {
                        item.Seed = null;
                    }
                }
            }
        }
    
        private void FixupFlags(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Flag item in e.NewItems)
                {
                    item.Seed = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Flag item in e.OldItems)
                {
                    if (ReferenceEquals(item.Seed, this))
                    {
                        item.Seed = null;
                    }
                }
            }
        }
    
        private void FixupMedia(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Medium item in e.NewItems)
                {
                    item.Seed = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Medium item in e.OldItems)
                {
                    if (ReferenceEquals(item.Seed, this))
                    {
                        item.Seed = null;
                    }
                }
            }
        }
    
        private void FixupRatings(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Rating item in e.NewItems)
                {
                    item.Seed = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Rating item in e.OldItems)
                {
                    if (ReferenceEquals(item.Seed, this))
                    {
                        item.Seed = null;
                    }
                }
            }
        }
    
        private void FixupTags(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Tag item in e.NewItems)
                {
                    item.Seed = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Tag item in e.OldItems)
                {
                    if (ReferenceEquals(item.Seed, this))
                    {
                        item.Seed = null;
                    }
                }
            }
        }
    
        private void FixupCategories(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Category item in e.NewItems)
                {
                    if (!item.Seeds.Contains(this))
                    {
                        item.Seeds.Add(this);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Category item in e.OldItems)
                {
                    if (item.Seeds.Contains(this))
                    {
                        item.Seeds.Remove(this);
                    }
                }
            }
        }
    
        private void FixupMemberReplySeeds(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (MemberReplySeed item in e.NewItems)
                {
                    item.Seed = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (MemberReplySeed item in e.OldItems)
                {
                    if (ReferenceEquals(item.Seed, this))
                    {
                        item.Seed = null;
                    }
                }
            }
        }
    
        private void FixupssStreams(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (ssStream item in e.NewItems)
                {
                    if (!item.Seeds.Contains(this))
                    {
                        item.Seeds.Add(this);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ssStream item in e.OldItems)
                {
                    if (item.Seeds.Contains(this))
                    {
                        item.Seeds.Remove(this);
                    }
                }
            }
        }
    
        private void FixupHideUnhides(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (HideUnhide item in e.NewItems)
                {
                    item.Seed = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (HideUnhide item in e.OldItems)
                {
                    if (ReferenceEquals(item.Seed, this))
                    {
                        item.Seed = null;
                    }
                }
            }
        }
    
        private void FixupSeed1(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Seed item in e.NewItems)
                {
                    item.Seed2 = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Seed item in e.OldItems)
                {
                    if (ReferenceEquals(item.Seed2, this))
                    {
                        item.Seed2 = null;
                    }
                }
            }
        }

        #endregion
    }
}
